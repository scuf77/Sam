from aiogram.types import (
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    ReplyKeyboardMarkup,
    KeyboardButton,
)
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder
from .catalog import CATALOG, Cake


def main_menu_kb(user_id: int = None) -> ReplyKeyboardMarkup:
    builder = ReplyKeyboardBuilder()
    builder.button(text="üç∞ –ö–∞—Ç–∞–ª–æ–≥")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ
    if user_id is not None:
        try:
            from main import CARTS
            cart_items = sum(CARTS.get(user_id, {}).values())
            if cart_items > 0:
                button_text = f"üõí –ö–æ—Ä–∑–∏–Ω–∞ ({cart_items})"
            else:
                button_text = "üõí –ö–æ—Ä–∑–∏–Ω–∞"
        except:
            button_text = "üõí –ö–æ—Ä–∑–∏–Ω–∞"
    else:
        button_text = "üõí –ö–æ—Ä–∑–∏–Ω–∞"
    
    builder.button(text=button_text)
    builder.adjust(2)
    return builder.as_markup(resize_keyboard=True)


def catalog_kb() -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    for cake in CATALOG:
        builder.button(text=f"{cake.name} ‚Äî {cake.price}‚ÇΩ", callback_data=f"cake:{cake.id}")
    builder.adjust(1)
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back:main")
    return builder.as_markup()


def cake_card_kb(cake: Cake, user_id: int = None) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –∫–æ—Ä–∑–∏–Ω–µ, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∫–∞–∑–∞–Ω
    if user_id is not None:
        from .catalog import get_cake_by_id
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
        current_qty = 0
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            from main import CARTS
            current_qty = CARTS.get(user_id, {}).get(cake.id, 0)
        except:
            pass
        
        if current_qty > 0:
            button_text = f"‚ûï –í –∫–æ—Ä–∑–∏–Ω—É ({current_qty})"
        else:
            button_text = "‚ûï –í –∫–æ—Ä–∑–∏–Ω—É"
    else:
        button_text = "‚ûï –í –∫–æ—Ä–∑–∏–Ω—É"
    
    builder.button(text=button_text, callback_data=f"add:{cake.id}")
    builder.button(text="‚¨ÖÔ∏è –ö –∫–∞—Ç–∞–ª–æ–≥—É", callback_data="back:catalog")
    builder.button(text="üõí –û—Ç–∫—Ä—ã—Ç—å –∫–æ—Ä–∑–∏–Ω—É", callback_data="open:cart")
    builder.adjust(1)
    return builder.as_markup()


def cart_kb(has_items: bool) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    if has_items:
        builder.button(text="üßπ –û—á–∏—Å—Ç–∏—Ç—å", callback_data="cart:clear")
        builder.button(text="‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="cart:checkout")
    builder.button(text="‚¨ÖÔ∏è –ö –∫–∞—Ç–∞–ª–æ–≥—É", callback_data="back:catalog")
    return builder.as_markup()


def order_confirmation_kb() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ —Å –∫–Ω–æ–ø–∫–æ–π –æ–ø–ª–∞—Ç—ã"""
    builder = InlineKeyboardBuilder()
    builder.button(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="payment:start")
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–æ—Ä–∑–∏–Ω–µ", callback_data="back:cart")
    builder.adjust(1)
    return builder.as_markup()


def payment_confirm_kb() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã"""
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úÖ –ü–ª–∞—Ç—ë–∂ –≤—ã–ø–æ–ª–Ω–µ–Ω", callback_data="payment:confirm")
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="payment:cancel")
    builder.adjust(1)
    return builder.as_markup()
