import asyncio
import logging
import time
from typing import Dict, DefaultDict, List
from collections import defaultdict
from datetime import datetime, timedelta, date, time as dt_time

from aiogram import Bot, Dispatcher, F
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery, Sticker
from aiogram.fsm.context import FSMContext
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode

from app.config import BOT_TOKEN, MANAGER_CHAT_ID, CARD_NUMBER
from app.catalog import CATALOG, get_cake_by_id
from app.keyboards import (
    main_menu_kb, catalog_kb, cake_card_kb, cart_kb,
    order_confirmation_kb, payment_confirm_kb,
    delivery_method_kb, dates_kb, time_slots_kb
)
from app.states import CheckoutState, PaymentState
from app.config import (
    BAKER_SCHEDULE_START_DATE, WORK_CYCLE_ON_DAYS, WORK_CYCLE_OFF_DAYS,
    WORKING_HOURS_START, WORKING_HOURS_END, SLOT_MINUTES,
    MIN_LEAD_HOURS, MAX_DAYS_AHEAD
)
from app.config import WELCOME_EFFECT_ID

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ü–∞–º—è—Ç—å –∫–æ—Ä–∑–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: user_id -> {cake_id: qty}
CARTS: DefaultDict[int, Dict[str, int]] = defaultdict(dict)


def cart_total(user_id: int) -> int:
    total = 0
    for cake_id, qty in CARTS[user_id].items():
        cake = get_cake_by_id(cake_id)
        if cake:
            total += cake.price * qty
    return total


def cart_text(user_id: int) -> str:
    if not CARTS[user_id]:
        return "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞."
    lines = ["–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:"]
    for cake_id, qty in CARTS[user_id].items():
        cake = get_cake_by_id(cake_id)
        if cake:
            lines.append(f"‚Ä¢ {cake.name} √ó {qty} = {cake.price * qty}‚ÇΩ")
    lines.append(f"–ò—Ç–æ–≥–æ: {cart_total(user_id)}‚ÇΩ")
    return "\n".join(lines)


# ==================== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–û–ï: –†–ê–°–ü–ò–°–ê–ù–ò–ï –ò –°–õ–û–¢–´ ====================

def _parse_schedule_start() -> date:
    try:
        y, m, d = [int(x) for x in BAKER_SCHEDULE_START_DATE.split("-")]
        return date(y, m, d)
    except Exception:
        return date.today()


def is_working_day(day: date) -> bool:
    base = _parse_schedule_start()
    cycle = WORK_CYCLE_ON_DAYS + WORK_CYCLE_OFF_DAYS
    if cycle <= 0:
        return True
    delta = (day - base).days
    mod = delta % cycle
    return 0 <= mod < WORK_CYCLE_ON_DAYS


def generate_available_dates(now_dt: datetime) -> List[str]:
    dates: List[str] = []
    for i in range(MAX_DAYS_AHEAD + 1):
        d = (now_dt.date() + timedelta(days=i))
        if not is_working_day(d):
            continue
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏: –µ—Å–ª–∏ –¥–µ–Ω—å —Ç–µ–∫—É—â–∏–π, –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ö–æ—Ç—è –±—ã MIN_LEAD_HOURS
        if i == 0:
            if now_dt + timedelta(hours=MIN_LEAD_HOURS) < datetime.combine(d, dt_time(hour=WORKING_HOURS_END)):
                dates.append(d.isoformat())
        else:
            dates.append(d.isoformat())
    return dates


def generate_time_slots_for_date(target_date_iso: str, now_dt: datetime) -> List[str]:
    try:
        y, m, d = [int(x) for x in target_date_iso.split("-")]
        target_date = date(y, m, d)
    except Exception:
        return []
    if not is_working_day(target_date):
        return []
    slots: List[str] = []
    start_dt = datetime.combine(target_date, dt_time(hour=WORKING_HOURS_START))
    end_dt = datetime.combine(target_date, dt_time(hour=WORKING_HOURS_END))
    step = timedelta(minutes=SLOT_MINUTES)
    cursor = start_dt
    min_dt = now_dt + timedelta(hours=MIN_LEAD_HOURS)
    while cursor + step <= end_dt:
        if cursor >= min_dt:
            slots.append(cursor.strftime("%H:%M"))
        cursor += step
    return slots


def format_date_ru(date_iso: str) -> str:
    try:
        y, m, d = [int(x) for x in date_iso.split("-")]
        return f"{d:02d}.{m:02d}.{y}"
    except Exception:
        return date_iso


def format_method_ru(method: str | None) -> str:
    if not method:
        return ""
    return "—Å–∞–º–æ–≤—ã–≤–æ–∑" if method == "pickup" else "–¥–æ—Å—Ç–∞–≤–∫–∞"


async def cmd_start(message: Message, state: FSMContext):
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    await state.clear()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π —Å—Ç–∏–∫–µ—Ä
    try:
        await message.answer_sticker(
            "CAACAgIAAxkBAAEPUWpou_GAnCdMdk0HEhGmGzuw1PBipgACBQADwDZPE_lqX5qCa011NgQ"
        )
    except:
        pass

    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å —Ü–∏—Ç–∞—Ç–æ–π –∏ —ç—Ñ—Ñ–µ–∫—Ç–æ–º
    text = f"""
–ü—Ä–∏–≤–µ—Ç, <b>{message.from_user.first_name}</b>! üëã –†–∞–¥—ã –≤–∏–¥–µ—Ç—å —Ç–µ–±—è –≤ –Ω–∞—à–µ–º –±–æ—Ç–µ ü•≥

<blockquote>üïí –ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã:
‚Ä¢ –ü–Ω ‚Äì –í—Å: –ö—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ</blockquote>

üõí –°—É–º–º–∞ –∑–∞–∫–∞–∑–∞ –æ—Ç 500 ‚ÇΩ  
üöö –î–æ—Å—Ç–∞–≤–∫–∞ ‚Äî 200 ‚ÇΩ (–±–µ—Å–ø–ª–∞—Ç–Ω–æ –æ—Ç 2500 ‚ÇΩ)

üìö –ü–æ–º–æ—â—å: –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –Ω–∞–ø–∏—à–∏ <b>"–ü–æ–º–æ—â—å"</b>, –∏ —è –±—É–¥—É —Ä–∞–¥ –ø–æ–º–æ—á—å!  

üëá –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –Ω–∏–∂–µ –∏ –Ω–∞—á–Ω—ë–º:
"""

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º —ç—Ñ—Ñ–µ–∫—Ç–æ–º —Å–∞–ª—é—Ç–∞ (fireworks)
    try:
        await message.answer(
            text,
            reply_markup=main_menu_kb(message.from_user.id),
            message_effect_id="5046509860389126442"
        )
    except:
        # –ü–∞–¥–µ–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∞ ‚Äî –ø—Ä–æ–±—É–µ–º —Å —ç—Ñ—Ñ–µ–∫—Ç–æ–º –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞ (–Ω–∞ —Å–ª—É—á–∞–π –æ—Ç–ª–∏—á–∏–π –∫–ª–∏–µ–Ω—Ç–∞)
        try:
            await message.answer(
                text,
                reply_markup=main_menu_kb(message.from_user.id),
                message_effect_id=WELCOME_EFFECT_ID
            )
        except:
            await message.answer(text, reply_markup=main_menu_kb(message.from_user.id))





async def show_catalog(message: Message | CallbackQuery):
    text = (
        "üç∞ <b>–ù–∞—à –∫–∞—Ç–∞–ª–æ–≥ —Ç–æ—Ä—Ç–æ–≤</b>\n\n"
        "‚ú® –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏–π—Å—è —Ç–æ—Ä—Ç –∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–µ–≥–æ, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Ñ–æ—Ç–æ –∏ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏!\n\n"
        "üí° –í—Å–µ —Ç–æ—Ä—Ç—ã –≥–æ—Ç–æ–≤—è—Ç—Å—è –∏–∑ —Å–≤–µ–∂–∏—Ö –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ –ø–æ –¥–æ–º–∞—à–Ω–∏–º —Ä–µ—Ü–µ–ø—Ç–∞–º."
    )
    if isinstance(message, Message):
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é) –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –≤ –∫–∞—Ç–∞–ª–æ–≥
        try:
            await message.delete()
        except:
            pass
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞—Ç–∞–ª–æ–≥–æ–º
        await message.answer(text, reply_markup=catalog_kb())
    else:
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –≤ –∫–∞—Ç–∞–ª–æ–≥
        try:
            await message.message.delete()
        except:
            pass
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞—Ç–∞–ª–æ–≥–æ–º
        await message.message.answer(text, reply_markup=catalog_kb())


async def open_cake_card(callback: CallbackQuery):
    cake_id = callback.data.split(":", 1)[1]
    cake = get_cake_by_id(cake_id)
    if not cake:
        await callback.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å –∫ —Ñ–æ—Ç–æ —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    photo_caption = (
        f"üç∞ <b>{cake.name}</b>\n\n"
        f"<blockquote>üìù {cake.description}\n\n"
        f"üí∞ –¶–µ–Ω–∞: {cake.price}‚ÇΩ</blockquote>\n\n"
        f"‚ú® –î–æ–±–∞–≤—å—Ç–µ –≤ –∫–æ—Ä–∑–∏–Ω—É –∏ –æ—Ñ–æ—Ä–º–∏—Ç–µ –∑–∞–∫–∞–∑!"
    )
    
    if callback.message:
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–∫–∞—Ç–∞–ª–æ–≥) –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ—Ä—Ç–∞
        try:
            await callback.message.delete()
        except:
            pass
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –≤ –ø–æ–¥–ø–∏—Å–∏
        await callback.message.answer_photo(
            photo=cake.photo_url,
            caption=photo_caption,
            reply_markup=cake_card_kb(cake, callback.from_user.id)
        )
    await callback.answer()


async def add_to_cart(callback: CallbackQuery):
    cake_id = callback.data.split(":", 1)[1]
    cake = get_cake_by_id(cake_id)
    if not cake:
        await callback.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    user_id = callback.from_user.id
    current_qty = CARTS[user_id].get(cake_id, 0)
    new_qty = current_qty + 1
    CARTS[user_id][cake_id] = new_qty
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–ª–Ω–æ–π –∫–æ—Ä–∑–∏–Ω–æ–π
    message_lines = [f"üéâ {cake.name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!"]
    message_lines.append("")
    message_lines.append("üì¶ –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
    for cart_cake_id, qty in CARTS[user_id].items():
        cart_cake = get_cake_by_id(cart_cake_id)
        if cart_cake:
            message_lines.append(f"‚Ä¢ {cart_cake.name} √ó {qty} = {cart_cake.price * qty}‚ÇΩ")
    
    message_lines.append(f"üí∞ –ò—Ç–æ–≥–æ: {cart_total(user_id)}‚ÇΩ")
    message_lines.append("")
    message_lines.append("üí° –û—Ç–∫—Ä–æ–π—Ç–µ –∫–æ—Ä–∑–∏–Ω—É, —á—Ç–æ–±—ã –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑!")
    
    message = "\n".join(message_lines)
    await callback.answer(message, show_alert=True)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    try:
        if callback.message:
            cake = get_cake_by_id(cake_id)
            if cake:
                # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ñ–æ—Ç–æ
                await callback.message.edit_reply_markup(
                    reply_markup=cake_card_kb(cake, user_id)
                )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–Ω–æ–ø–∫–∏: {e}")


async def open_cart(event: Message | CallbackQuery):
    user_id = event.from_user.id if isinstance(event, Message) else event.from_user.id
    text = cart_text(user_id)
    has_items = bool(CARTS[user_id])
    if isinstance(event, Message):
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é) –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –∫–æ—Ä–∑–∏–Ω—ã
        try:
            await event.delete()
        except:
            pass
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ—Ä–∑–∏–Ω–æ–π
        await event.answer(text, reply_markup=cart_kb(has_items))
    else:
        if event.message:
            # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –∫–æ—Ä–∑–∏–Ω—ã
            try:
                await event.message.delete()
            except:
                pass
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ—Ä–∑–∏–Ω–æ–π
            await event.message.answer(text, reply_markup=cart_kb(has_items))
        await event.answer()


async def clear_cart(callback: CallbackQuery):
    CARTS.pop(callback.from_user.id, None)
    await open_cart(callback)


async def start_checkout(callback: CallbackQuery, state: FSMContext):
    if not CARTS[callback.from_user.id]:
        await callback.answer("–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞", show_alert=True)
        return
    await state.set_state(CheckoutState.delivery_method)
    await callback.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:",
        reply_markup=delivery_method_kb()
    )
    await callback.answer()


async def choose_delivery_method(callback: CallbackQuery, state: FSMContext):
    method = callback.data.split(":", 1)[1]  # pickup | delivery
    await state.update_data(delivery_method=method)
    # –î–∞–ª–µ–µ ‚Äî –≤—ã–±–æ—Ä –¥–∞—Ç—ã
    await state.set_state(CheckoutState.delivery_date)
    now_dt = datetime.now()
    dates = generate_available_dates(now_dt)
    if not dates:
        await callback.message.edit_text(
            "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –±–ª–∏–∂–∞–π—à–∏–µ —Å–ª–æ—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await callback.answer()
        return
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:", reply_markup=dates_kb(dates)
    )
    await callback.answer()


async def choose_date(callback: CallbackQuery, state: FSMContext):
    date_str = callback.data.split(":", 1)[1]
    await state.update_data(delivery_date=date_str)
    await state.set_state(CheckoutState.delivery_time)
    now_dt = datetime.now()
    slots = generate_time_slots_for_date(date_str, now_dt)
    if not slots:
        await callback.message.edit_text(
            "–í –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –¥–∞—Ç—É:",
            reply_markup=dates_kb(generate_available_dates(now_dt))
        )
        await callback.answer()
        return
    await callback.message.edit_text(
        f"–î–∞—Ç–∞: {format_date_ru(date_str)}. –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:",
        reply_markup=time_slots_kb(date_str, slots)
    )
    await callback.answer()


async def choose_time(callback: CallbackQuery, state: FSMContext):
    payload = callback.data.split(":", 1)[1]
    time_str, date_str = payload.split("|")
    await state.update_data(delivery_time=time_str, delivery_date=date_str)
    # –î–∞–ª–µ–µ ‚Äî –§–ò–û
    await state.set_state(CheckoutState.full_name)
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ò–º—è:")
    await callback.answer()


async def ask_phone(message: Message, state: FSMContext):
    await state.update_data(full_name=message.text)
    await state.set_state(CheckoutState.phone)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä, +7XXXXXXXXXX):")


async def ask_address(message: Message, state: FSMContext):
    await state.update_data(phone=message.text)
    data = await state.get_data()
    if data.get("delivery_method") == "delivery":
        await state.set_state(CheckoutState.address)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:")
    else:
        # –°–∞–º–æ–≤—ã–≤–æ–∑ ‚Äî –∞–¥—Ä–µ—Å –Ω–µ —Å–ø—Ä–∞—à–∏–≤–∞–µ–º
        await state.set_state(CheckoutState.comment)
        await message.answer("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É (–∏–ª–∏ '-' –µ—Å–ª–∏ –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è):")


async def ask_comment(message: Message, state: FSMContext):
    await state.update_data(address=message.text)
    await state.set_state(CheckoutState.comment)
    await message.answer("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É (–∏–ª–∏ '-' –µ—Å–ª–∏ –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è):")


async def finish_checkout(message: Message, state: FSMContext):
    data = await state.get_data()
    comment = message.text if message.text != "-" else "–±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"
    user_id = message.from_user.id

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –æ–ø–ª–∞—Ç—ã
    await state.update_data(
        full_name=data.get('full_name'),
        phone=data.get('phone'),
        address=data.get('address'),
        comment=comment
    )

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
    user_order_lines = ["üÜï –ó–ê–ö–ê–ó –û–§–û–†–ú–õ–ï–ù"]
    user_order_lines.append("")
    user_order_lines.append("üìã –°–æ–¥–µ—Ä–∂–∏–º–æ–µ:")
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ—Ä–∑–∏–Ω—ã
    for cake_id, qty in CARTS[user_id].items():
        cake = get_cake_by_id(cake_id)
        if cake:
            user_order_lines.append(f"‚Ä¢ {cake.name} √ó {qty} = {cake.price * qty}‚ÇΩ")
    
    user_order_lines.append(f"–ò—Ç–æ–≥–æ: {cart_total(user_id)}‚ÇΩ")
    user_order_lines.append("")
    user_order_lines.append("üë§ –î–∞–Ω–Ω—ã–µ:")
    user_order_lines.append(f"‚Ä¢ –í–∞—à–µ –∏–º—è: {data.get('full_name')}")
    user_order_lines.append(f"‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: {data.get('phone')}")
    user_order_lines.append(f"‚Ä¢ –°–ø–æ—Å–æ–±: {format_method_ru(data.get('delivery_method'))}")
    user_order_lines.append(f"‚Ä¢ –î–∞—Ç–∞: {format_date_ru(data.get('delivery_date'))}")
    user_order_lines.append(f"‚Ä¢ –í—Ä–µ–º—è: {data.get('delivery_time')}")
    user_order_lines.append(f"‚Ä¢ –ê–¥—Ä–µ—Å: {data.get('address', '—Å–∞–º–æ–≤—ã–≤–æ–∑')}")
    user_order_lines.append(f"‚Ä¢ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}")
    user_order_lines.append("")
    user_order_lines.append("‚è∞ –í—Ä–µ–º—è –∑–∞–∫–∞–∑–∞: " + message.date.strftime("%d.%m.%Y %H:%M:%S"))
    user_order_lines.append("")
    user_order_lines.append("üí≥ –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–û–ø–ª–∞—Ç–∏—Ç—å –∑–∞–∫–∞–∑' –Ω–∏–∂–µ.")
    
    user_order_text = "\n".join(user_order_lines)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ —Å –∫–Ω–æ–ø–∫–æ–π –æ–ø–ª–∞—Ç—ã
    await message.answer(user_order_text, reply_markup=order_confirmation_kb())
    
    logger.info(f"–ó–∞–∫–∞–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ—Ñ–æ—Ä–º–ª–µ–Ω, –æ–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã")


async def back_handler(callback: CallbackQuery):
    action = callback.data.split(":", 1)[1]
    if action == "main":
        text = (
            "üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n"
            "üç∞ <b>–ö–∞—Ç–∞–ª–æ–≥</b> - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞—à–∏ —Ç–æ—Ä—Ç—ã\n"
            "üõí <b>–ö–æ—Ä–∑–∏–Ω–∞</b> - –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑\n"
            "‚≠ê <b>–û—Ç–∑—ã–≤—ã</b> - –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –∏–ª–∏ –ø–æ—á–∏—Ç–∞—Ç—å –æ—Ç–∑—ã–≤—ã\n\n"
            "‚ö° <b>–ë—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
            "‚Ä¢ /start - –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞\n"
            "‚Ä¢ /basket - –æ—Ç–∫—Ä—ã—Ç—å –∫–æ—Ä–∑–∏–Ω—É\n"
            "‚Ä¢ /feedback - –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤\n\n"
            "üí° –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ!"
        )
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            await callback.message.delete()
        except:
            pass
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é
        await callback.message.answer(text, reply_markup=main_menu_kb(callback.from_user.id))
    elif action == "catalog":
        await show_catalog(callback)
    elif action == "cart":
        await open_cart(callback)
    elif action == "delivery":
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:", reply_markup=delivery_method_kb()
        )
    elif action == "dates":
        now_dt = datetime.now()
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:", reply_markup=dates_kb(generate_available_dates(now_dt))
        )
    await callback.answer()


# ==================== –û–ü–õ–ê–¢–ê –ù–ê –ö–ê–†–¢–£ ====================

async def start_payment(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã"""
    user_id = callback.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –∑–∞–∫–∞–∑
    if not CARTS[user_id]:
        await callback.answer("–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
    order_data = await state.get_data()
    
    payment_text = f"""üí≥ –û–ü–õ–ê–¢–ê –ó–ê–ö–ê–ó–ê

üí∞ –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {cart_total(user_id)}‚ÇΩ

üì± –ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã:
{CARD_NUMBER}

üìã –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∑–∞–∫–∞–∑–∞:
{chr(10).join([f"‚Ä¢ {get_cake_by_id(cake_id).name} √ó {qty} = {get_cake_by_id(cake_id).price * qty}‚ÇΩ" for cake_id, qty in CARTS[user_id].items()])}

üë§ –î–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞:
‚Ä¢ –ò–º—è: {order_data.get('full_name')}
‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: {order_data.get('phone')}
‚Ä¢ –°–ø–æ—Å–æ–±: {format_method_ru(order_data.get('delivery_method'))}
‚Ä¢ –î–∞—Ç–∞: {format_date_ru(order_data.get('delivery_date'))}
‚Ä¢ –í—Ä–µ–º—è: {order_data.get('delivery_time')}
‚Ä¢ –ê–¥—Ä–µ—Å: {order_data.get('address', '—Å–∞–º–æ–≤—ã–≤–æ–∑')}
‚Ä¢ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {order_data.get('comment', '–±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è')}

‚ö†Ô∏è –ü–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–µ–Ω–µ–≥ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ü–ª–∞—Ç—ë–∂ –≤—ã–ø–æ–ª–Ω–µ–Ω" –Ω–∏–∂–µ."""
    
    await state.set_state(PaymentState.confirm)
    await callback.message.edit_text(payment_text, reply_markup=payment_confirm_kb())
    await callback.answer()


async def process_payment_confirmation(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã"""
    user_id = callback.from_user.id
    order_data = await state.get_data()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ
    success_text = f"""‚úÖ –ü–õ–ê–¢–Å–ñ –ü–û–î–¢–í–ï–†–ñ–î–Å–ù!

üí≥ –ó–∞–∫–∞–∑ –æ–ø–ª–∞—á–µ–Ω –Ω–∞ —Å—É–º–º—É: {cart_total(user_id)}‚ÇΩ
üì± –ö–∞—Ä—Ç–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è: {CARD_NUMBER}

üÜï –ó–ê–ö–ê–ó –ü–†–ò–ù–Ø–¢ –ò –û–ü–õ–ê–ß–ï–ù

üìã –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∑–∞–∫–∞–∑–∞:
{chr(10).join([f"‚Ä¢ {get_cake_by_id(cake_id).name} √ó {qty} = {get_cake_by_id(cake_id).price * qty}‚ÇΩ" for cake_id, qty in CARTS[user_id].items()])}

üë§ –î–∞–Ω–Ω—ã–µ:
‚Ä¢ –ò–º—è: {order_data.get('full_name')}
‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: {order_data.get('phone')}
‚Ä¢ –°–ø–æ—Å–æ–±: {format_method_ru(order_data.get('delivery_method'))}
‚Ä¢ –î–∞—Ç–∞: {format_date_ru(order_data.get('delivery_date'))}
‚Ä¢ –í—Ä–µ–º—è: {order_data.get('delivery_time')}
‚Ä¢ –ê–¥—Ä–µ—Å: {order_data.get('address', '—Å–∞–º–æ–≤—ã–≤–æ–∑')}
‚Ä¢ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {order_data.get('comment', '–±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è')}

‚è∞ –í—Ä–µ–º—è –∑–∞–∫–∞–∑–∞: {callback.message.date.strftime("%d.%m.%Y %H:%M:%S")}

‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç –∏ –æ–ø–ª–∞—á–µ–Ω! –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."""
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É
    if MANAGER_CHAT_ID:
        manager_text = f"""üí≥ –ü–õ–ê–¢–Å–ñ –ü–û–î–¢–í–ï–†–ñ–î–Å–ù!

üÜï –ù–û–í–´–ô –ó–ê–ö–ê–ó
==============================

üìã –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∑–∞–∫–∞–∑–∞:
{chr(10).join([f"‚Ä¢ {get_cake_by_id(cake_id).name} √ó {qty} = {get_cake_by_id(cake_id).price * qty}‚ÇΩ" for cake_id, qty in CARTS[user_id].items()])}
–ò—Ç–æ–≥–æ: {cart_total(user_id)}‚ÇΩ

üë§ –î–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞:
‚Ä¢ –ò–º—è: {order_data.get('full_name')}
‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: {order_data.get('phone')}
‚Ä¢ –°–ø–æ—Å–æ–±: {order_data.get('delivery_method')}
‚Ä¢ –î–∞—Ç–∞: {order_data.get('delivery_date')}
‚Ä¢ –í—Ä–µ–º—è: {order_data.get('delivery_time')}
‚Ä¢ –ê–¥—Ä–µ—Å: {order_data.get('address', '—Å–∞–º–æ–≤—ã–≤–æ–∑')}
‚Ä¢ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {order_data.get('comment', '–±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è')}

üë®‚Äçüíª –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:
‚Ä¢ Username: @{callback.from_user.username or '–±–µ–∑ –Ω–∏–∫–Ω–µ–π–º–∞'}
‚Ä¢ ID: {callback.from_user.id}
‚Ä¢ –ò–º—è: {callback.from_user.first_name or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}
‚Ä¢ –§–∞–º–∏–ª–∏—è: {callback.from_user.last_name or '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}

‚è∞ –í—Ä–µ–º—è –∑–∞–∫–∞–∑–∞: {callback.message.date.strftime("%d.%m.%Y %H:%M:%S")}
==============================

üí∞ –°–¢–ê–¢–£–°: –ü–õ–ê–¢–Å–ñ –ü–û–î–¢–í–ï–†–ñ–î–Å–ù –ö–õ–ò–ï–ù–¢–û–ú
‚ö†Ô∏è –¢–†–ï–ë–£–ï–¢–°–Ø –ü–†–û–í–ï–†–ö–ê –ü–õ–ê–¢–ï–ñ–ê"""
        
        try:
            await callback.bot.send_message(MANAGER_CHAT_ID, manager_text)
            logger.info(f"–ó–∞–∫–∞–∑ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –ø–ª–∞—Ç–µ–∂–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –º–µ–Ω–µ–¥–∂–µ—Ä—É {MANAGER_CHAT_ID}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–∫–∞–∑–∞: {e}")
    
    # –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    CARTS.pop(user_id, None)
    await state.clear()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await callback.message.edit_text(success_text)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∏–∫–µ—Ä –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã
    try:
        await callback.message.answer_sticker("CAACAgIAAxkBAAEPUX1ou_UPzrbLgxAAAc6qcrkC74GQj70AAgEdAAJdjShIYFtNtyx1ELs2BA")
    except:
        pass
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Å—å–±–æ–π –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤
    review_text = """‚≠ê <b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤ –æ –Ω–∞—à–µ–º –∑–∞–∫–∞–∑–µ!</b>

–í–∞—à–µ –º–Ω–µ–Ω–∏–µ –æ—á–µ–Ω—å –≤–∞–∂–Ω–æ –¥–ª—è –Ω–∞—Å –∏ –ø–æ–º–æ–∂–µ—Ç –¥—Ä—É–≥–∏–º –∫–ª–∏–µ–Ω—Ç–∞–º —Å–¥–µ–ª–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤—ã–±–æ—Ä.

üìù <b>–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –º–æ–∂–Ω–æ –∑–¥–µ—Å—å:</b>
https://t.me/qwert1moment/2

üí¨ <b>–ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã?</b> –û–±—â–∞–π—Ç–µ—Å—å —Å –¥—Ä—É–≥–∏–º–∏ –∫–ª–∏–µ–Ω—Ç–∞–º–∏:
https://t.me/+zdtovQ9SvMxjZTUy

üôè –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –∑–∞–∫–∞–∑!"""
    
    await callback.message.answer(review_text, disable_web_page_preview=True)
    await callback.answer()
    
    logger.info(f"–ó–∞–∫–∞–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –ø–ª–∞—Ç–µ–∂–∞")


async def cancel_payment(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω—è–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ–ø–ª–∞—Ç—ã"""
    await state.clear()
    await callback.message.edit_text("‚ùå –û–ø–ª–∞—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –ó–∞–∫–∞–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω–µ.")
    await callback.answer()


async def back_to_cart(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ –∫–æ—Ä–∑–∏–Ω–µ"""
    await state.clear()
    await open_cart(callback)


async def show_reviews(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–∑—ã–≤–∞—Ö"""
    text = """‚≠ê <b>–û—Ç–∑—ã–≤—ã –Ω–∞—à–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤</b>

–ú—ã –æ—á–µ–Ω—å —Ü–µ–Ω–∏–º –º–Ω–µ–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞! –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:

üìù <b>–û—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ–π –æ—Ç–∑—ã–≤</b> ‚Äî –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è–º–∏ –æ –∑–∞–∫–∞–∑–µ
‚≠ê <b>–ü–æ—á–∏—Ç–∞—Ç—å –æ—Ç–∑—ã–≤—ã</b> ‚Äî —É–∑–Ω–∞–π—Ç–µ, —á—Ç–æ –≥–æ–≤–æ—Ä—è—Ç –¥—Ä—É–≥–∏–µ –∫–ª–∏–µ–Ω—Ç—ã

üëá <b>–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å—Å—ã–ª–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ –æ—Ç–∑—ã–≤–∞–º:</b>

https://t.me/qwert1moment/2

üí¨ <b>–ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã?</b> –û–±—â–∞–π—Ç–µ—Å—å —Å –¥—Ä—É–≥–∏–º–∏ –∫–ª–∏–µ–Ω—Ç–∞–º–∏ –≤ –Ω–∞—à–µ–º —á–∞—Ç–µ:
https://t.me/+zdtovQ9SvMxjZTUy

üôè –°–ø–∞—Å–∏–±–æ –∑–∞ —Ç–æ, —á—Ç–æ –≤—ã–±–∏—Ä–∞–µ—Ç–µ –Ω–∞—Å!"""
    
    await message.answer(text, disable_web_page_preview=True)


async def cmd_basket(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /basket - –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –∫–æ—Ä–∑–∏–Ω—É"""
    await open_cart(message)


async def cmd_feedback(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /feedback - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–∑—ã–≤–∞—Ö"""
    await show_reviews(message)


async def main():
    logger.info("–ó–∞–ø—É—Å–∫ –∫—É–ª–∏–Ω–∞—Ä–Ω–æ–≥–æ –±–æ—Ç–∞...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    if not MANAGER_CHAT_ID:
        logger.error("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: MANAGER_CHAT_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
        logger.error("‚ùå –ó–∞–∫–∞–∑—ã –ù–ï –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –≤ —á–∞—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞!")
        logger.error("‚ùå –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º MANAGER_CHAT_ID")
        logger.error("‚ùå –ò–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è MANAGER_CHAT_ID")
    else:
        logger.info(f"‚úÖ MANAGER_CHAT_ID –Ω–∞—Å—Ç—Ä–æ–µ–Ω: {MANAGER_CHAT_ID}")
    
    bot = Bot(BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
    dp = Dispatcher()

    # –ö–æ–º–∞–Ω–¥—ã
    dp.message.register(cmd_start, CommandStart())
    dp.message.register(cmd_basket, Command("basket"))
    dp.message.register(cmd_feedback, Command("feedback"))

    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    dp.message.register(show_catalog, F.text == "üç∞ –ö–∞—Ç–∞–ª–æ–≥")
    dp.message.register(open_cart, F.text.startswith("üõí –ö–æ—Ä–∑–∏–Ω–∞"))
    dp.message.register(show_reviews, F.text == "‚≠ê –û—Ç–∑—ã–≤—ã")

    # –ö–∞—Ç–∞–ª–æ–≥ –∏ –∫–∞—Ä—Ç–æ—á–∫–∏
    dp.callback_query.register(open_cake_card, F.data.startswith("cake:"))
    dp.callback_query.register(add_to_cart, F.data.startswith("add:"))

    # –ö–æ—Ä–∑–∏–Ω–∞
    dp.callback_query.register(open_cart, F.data == "open:cart")
    dp.callback_query.register(clear_cart, F.data == "cart:clear")

    # –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ
    dp.callback_query.register(start_checkout, F.data == "cart:checkout")
    dp.callback_query.register(choose_delivery_method, F.data.startswith("delivery:"))
    dp.callback_query.register(choose_date, F.data.startswith("date:"))
    dp.callback_query.register(choose_time, F.data.startswith("time:"))
    dp.message.register(ask_phone, CheckoutState.full_name)
    dp.message.register(ask_address, CheckoutState.phone)
    dp.message.register(ask_comment, CheckoutState.address)
    dp.message.register(finish_checkout, CheckoutState.comment)

    # –ù–∞–≤–∏–≥–∞—Ü–∏—è
    dp.callback_query.register(back_handler, F.data.startswith("back:"))
    
    # –ü–ª–∞—Ç–µ–∂–∏
    dp.callback_query.register(start_payment, F.data == "payment:start")
    dp.callback_query.register(process_payment_confirmation, F.data == "payment:confirm")
    dp.callback_query.register(cancel_payment, F.data == "payment:cancel")
    dp.callback_query.register(back_to_cart, F.data == "back:cart")

    logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫—É–ª–∏–Ω–∞—Ä–Ω–æ–≥–æ –±–æ—Ç–∞...")
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        raise
