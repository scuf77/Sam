import asyncio
import logging
import time
from typing import Dict, DefaultDict, List
from collections import defaultdict
from datetime import datetime, timedelta, date, time as dt_time

from aiogram import Bot, Dispatcher, F
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery, Sticker
from aiogram.fsm.context import FSMContext
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode

from app.config import BOT_TOKEN, MANAGER_CHAT_ID, CARD_NUMBER
from app.catalog import CATALOG, get_cake_by_id
from app.keyboards import (
    main_menu_kb, catalog_kb, cake_card_kb, cart_kb,
    order_confirmation_kb, payment_confirm_kb,
    delivery_method_kb, dates_kb, time_slots_kb
)
from app.states import CheckoutState, PaymentState
from app.config import (
    BAKER_SCHEDULE_START_DATE, WORK_CYCLE_ON_DAYS, WORK_CYCLE_OFF_DAYS,
    WORKING_HOURS_START, WORKING_HOURS_END, SLOT_MINUTES,
    MIN_LEAD_HOURS, MAX_DAYS_AHEAD
)
from app.config import WELCOME_EFFECT_ID

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ü–∞–º—è—Ç—å –∫–æ—Ä–∑–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: user_id -> {cake_id: qty}
CARTS: DefaultDict[int, Dict[str, int]] = defaultdict(dict)


def cart_total(user_id: int) -> int:
    total = 0
    for cake_id, qty in CARTS[user_id].items():
        cake = get_cake_by_id(cake_id)
        if cake:
            total += cake.price * qty
    return total


def cart_text(user_id: int) -> str:
    if not CARTS[user_id]:
        return "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞."
    lines = ["–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:"]
    for cake_id, qty in CARTS[user_id].items():
        cake = get_cake_by_id(cake_id)
        if cake:
            lines.append(f"‚Ä¢ {cake.name} √ó {qty} = {cake.price * qty}‚ÇΩ")
    lines.append(f"–ò—Ç–æ–≥–æ: {cart_total(user_id)}‚ÇΩ")
    return "\n".join(lines)


# ==================== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–û–ï: –†–ê–°–ü–ò–°–ê–ù–ò–ï –ò –°–õ–û–¢–´ ====================

def _parse_schedule_start() -> date:
    try:
        y, m, d = [int(x) for x in BAKER_SCHEDULE_START_DATE.split("-")]
        return date(y, m, d)
    except Exception:
        return date.today()


def is_working_day(day: date) -> bool:
    base = _parse_schedule_start()
    cycle = WORK_CYCLE_ON_DAYS + WORK_CYCLE_OFF_DAYS
    if cycle <= 0:
        return True
    delta = (day - base).days
    mod = delta % cycle
    return 0 <= mod < WORK_CYCLE_ON_DAYS


def generate_available_dates(now_dt: datetime) -> List[str]:
    dates: List[str] = []
    for i in range(MAX_DAYS_AHEAD + 1):
        d = (now_dt.date() + timedelta(days=i))
        if not is_working_day(d):
            continue
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏: –µ—Å–ª–∏ –¥–µ–Ω—å —Ç–µ–∫—É—â–∏–π, –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ö–æ—Ç—è –±—ã MIN_LEAD_HOURS
        if i == 0:
            if now_dt + timedelta(hours=MIN_LEAD_HOURS) < datetime.combine(d, dt_time(hour=WORKING_HOURS_END)):
                dates.append(d.isoformat())
        else:
            dates.append(d.isoformat())
    return dates


def generate_time_slots_for_date(target_date_iso: str, now_dt: datetime) -> List[str]:
    try:
        y, m, d = [int(x) for x in target_date_iso.split("-")]
        target_date = date(y, m, d)
    except Exception:
        return []
    if not is_working_day(target_date):
        return []
    slots: List[str] = []
    start_dt = datetime.combine(target_date, dt_time(hour=WORKING_HOURS_START))
    end_dt = datetime.combine(target_date, dt_time(hour=WORKING_HOURS_END))
    step = timedelta(minutes=SLOT_MINUTES)
    cursor = start_dt
    min_dt = now_dt + timedelta(hours=MIN_LEAD_HOURS)
    while cursor + step <= end_dt:
        if cursor >= min_dt:
            slots.append(cursor.strftime("%H:%M"))
        cursor += step
    return slots


def format_date_ru(date_iso: str) -> str:
    try:
        y, m, d = [int(x) for x in date_iso.split("-")]
        return f"{d:02d}.{m:02d}.{y}"
    except Exception:
        return date_iso


def format_method_ru(method: str | None) -> str:
    if not method:
        return ""
    return "—Å–∞–º–æ–≤—ã–≤–æ–∑" if method == "pickup" else "–¥–æ—Å—Ç–∞–≤–∫–∞"


async def cmd_start(message: Message, state: FSMContext):
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    await state.clear()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π —Å—Ç–∏–∫–µ—Ä
    try:
        await message.answer_sticker(
            "CAACAgIAAxkBAAEPUWpou_GAnCdMdk0HEhGmGzuw1PBipgACBQADwDZPE_lqX5qCa011NgQ"
        )
    except:
        pass

    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å —Ü–∏—Ç–∞—Ç–æ–π –∏ —ç–º–æ–¥–∑–∏ üéâ, –∫–æ—Ç–æ—Ä—ã–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–∑—ã–≤–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç
    text = f"""
–ü—Ä–∏–≤–µ—Ç, <b>{message.from_user.first_name}</b>! üëã –†–∞–¥—ã –≤–∏–¥–µ—Ç—å —Ç–µ–±—è –≤ –Ω–∞—à–µ–º –±–æ—Ç–µ ü•≥üéâ

<blockquote>üïí –ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã:
‚Ä¢ –ü–Ω ‚Äì –í—Å: –ö—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ</blockquote>

üõí –°—É–º–º–∞ –∑–∞–∫–∞–∑–∞ –æ—Ç 500 ‚ÇΩ  
üöö –î–æ—Å—Ç–∞–≤–∫–∞ ‚Äî 200 ‚ÇΩ (–±–µ—Å–ø–ª–∞—Ç–Ω–æ –æ—Ç 2500 ‚ÇΩ)

üìö –ü–æ–º–æ—â—å: –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –Ω–∞–ø–∏—à–∏ <b>"–ü–æ–º–æ—â—å"</b>, –∏ —è –±—É–¥—É —Ä–∞–¥ –ø–æ–º–æ—á—å!  

üëá –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –Ω–∏–∂–µ –∏ –Ω–∞—á–Ω—ë–º:
"""

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ (—ç—Ñ—Ñ–µ–∫—Ç üéâ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
    await message.answer(
        text,
        reply_markup=main_menu_kb(message.from_user.id)
    )


# ... –≤–µ—Å—å –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –æ—Å—Ç–∞—ë—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ...

async def main():
    logger.info("–ó–∞–ø—É—Å–∫ –∫—É–ª–∏–Ω–∞—Ä–Ω–æ–≥–æ –±–æ—Ç–∞...")
    
    if not MANAGER_CHAT_ID:
        logger.error("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: MANAGER_CHAT_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
    else:
        logger.info(f"‚úÖ MANAGER_CHAT_ID –Ω–∞—Å—Ç—Ä–æ–µ–Ω: {MANAGER_CHAT_ID}")
    
    bot = Bot(BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
    dp = Dispatcher()

    dp.message.register(cmd_start, CommandStart())
    dp.message.register(cmd_basket, Command("basket"))
    dp.message.register(cmd_feedback, Command("feedback"))

    dp.message.register(show_catalog, F.text == "üç∞ –ö–∞—Ç–∞–ª–æ–≥")
    dp.message.register(open_cart, F.text.startswith("üõí –ö–æ—Ä–∑–∏–Ω–∞"))
    dp.message.register(show_reviews, F.text == "‚≠ê –û—Ç–∑—ã–≤—ã")

    dp.callback_query.register(open_cake_card, F.data.startswith("cake:"))
    dp.callback_query.register(add_to_cart, F.data.startswith("add:"))
    dp.callback_query.register(open_cart, F.data == "open:cart")
    dp.callback_query.register(clear_cart, F.data == "cart:clear")
    dp.callback_query.register(start_checkout, F.data == "cart:checkout")
    dp.callback_query.register(choose_delivery_method, F.data.startswith("delivery:"))
    dp.callback_query.register(choose_date, F.data.startswith("date:"))
    dp.callback_query.register(choose_time, F.data.startswith("time:"))
    dp.message.register(ask_phone, CheckoutState.full_name)
    dp.message.register(ask_address, CheckoutState.phone)
    dp.message.register(ask_comment, CheckoutState.address)
    dp.message.register(finish_checkout, CheckoutState.comment)
    dp.callback_query.register(back_handler, F.data.startswith("back:"))
    dp.callback_query.register(start_payment, F.data == "payment:start")
    dp.callback_query.register(process_payment_confirmation, F.data == "payment:confirm")
    dp.callback_query.register(cancel_payment, F.data == "payment:cancel")
    dp.callback_query.register(back_to_cart, F.data == "back:cart")

    logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫—É–ª–∏–Ω–∞—Ä–Ω–æ–≥–æ –±–æ—Ç–∞...")
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        raise
